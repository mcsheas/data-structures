#BlueJ class context
comment0.target=ExecutiveManager
comment0.text=\r\n\ Manages\ departments,\ executives,\ and\ processes\ user\ commands\ to\ manage\r\n\ executives\ within\ various\ departments\ in\ an\ organization.\r\n\ Provides\ functions\ for\ hiring,\ assigning,\ and\ removing\ executives,\r\n\ as\ well\ as\ displaying\ payroll\ information.\r\n
comment1.params=departmentName
comment1.target=void\ addDepartment(java.lang.String)
comment1.text=\r\n\ Adds\ a\ new\ department\ to\ the\ organization.\r\n\r\n\ @param\ departmentName\ The\ name\ of\ the\ department\ to\ add.\r\n
comment10.params=args
comment10.target=void\ main(java.lang.String[])
comment10.text=\r\n\ The\ main\ method\ that\ runs\ the\ command-line\ interface\ for\ managing\ executives\r\n\ and\ departments.\ Provides\ commands\ to\ add\ departments,\ hire\ executives,\ assign\r\n\ executives\ to\ departments,\ view\ payroll,\ and\ other\ operations.\r\n\r\n\ @param\ args\ Command-line\ arguments\ (not\ used).\r\n
comment2.params=executiveName
comment2.target=void\ hireExecutive(java.lang.String)
comment2.text=\r\n\ Hires\ a\ new\ executive\ and\ adds\ them\ to\ the\ list\ of\ executives.\r\n\r\n\ @param\ executiveName\ The\ name\ of\ the\ executive\ to\ hire.\r\n
comment3.params=departmentName
comment3.target=Department\ findDepartment(java.lang.String)
comment3.text=\r\n\ Finds\ a\ department\ by\ name.\r\n\r\n\ @param\ departmentName\ The\ name\ of\ the\ department\ to\ search\ for.\r\n\ @return\ The\ department\ if\ found;\ otherwise,\ null.\r\n
comment4.params=executiveName
comment4.target=Executive\ findExecutive(java.lang.String)
comment4.text=\r\n\ Finds\ an\ executive\ by\ name.\r\n\r\n\ @param\ executiveName\ The\ name\ of\ the\ executive\ to\ search\ for.\r\n\ @return\ The\ executive\ if\ found;\ otherwise,\ null.\r\n
comment5.params=executiveName\ departmentName
comment5.target=void\ joinDepartment(java.lang.String,\ java.lang.String)
comment5.text=\r\n\ Assigns\ an\ executive\ to\ a\ department.\ Removes\ the\ executive\ from\ their\r\n\ current\ department,\ if\ any,\ before\ adding\ them\ to\ the\ new\ department.\r\n\r\n\ @param\ executiveName\ \ The\ name\ of\ the\ executive\ to\ join\ the\ department.\r\n\ @param\ departmentName\ The\ name\ of\ the\ department\ to\ join.\r\n
comment6.params=executiveName
comment6.target=void\ quitDepartment(java.lang.String)
comment6.text=\r\n\ Removes\ an\ executive\ from\ their\ current\ department.\r\n\r\n\ @param\ executiveName\ The\ name\ of\ the\ executive\ to\ remove.\r\n
comment7.params=executiveName\ newDepartmentName
comment7.target=void\ changeDepartment(java.lang.String,\ java.lang.String)
comment7.text=\r\n\ Changes\ the\ department\ of\ an\ executive\ to\ a\ new\ department.\r\n\r\n\ @param\ executiveName\ \ \ \ \ The\ name\ of\ the\ executive\ to\ move.\r\n\ @param\ newDepartmentName\ The\ name\ of\ the\ new\ department.\r\n
comment8.params=
comment8.target=void\ displayPayroll()
comment8.text=\r\n\ Displays\ the\ payroll\ for\ all\ departments,\ listing\ each\ executive\ and\ their\ salary.\r\n
comment9.params=executiveName
comment9.target=void\ displaySalary(java.lang.String)
comment9.text=\r\n\ Displays\ the\ salary\ of\ a\ specified\ executive.\r\n\r\n\ @param\ executiveName\ The\ name\ of\ the\ executive\ whose\ salary\ is\ displayed.\r\n
numComments=11
