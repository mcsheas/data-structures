#BlueJ class context
comment0.target=Sorter
comment0.text=\r\n\ A\ class\ that\ implements\ various\ sorting\ algorithms\ and\ tracks\ the\ number\ of\ swaps\ performed.\r\n\ Each\ sorting\ method\ takes\ an\ unsorted\ array\ and\ returns\ a\ sorted\ array\ in\ ascending\ order.\r\n
comment1.params=array
comment1.target=int[]\ bubbleSort(int[])
comment1.text=\r\n\ Sorts\ an\ array\ using\ bubble\ sort\ algorithm.\r\n\ Repeatedly\ steps\ through\ the\ array,\ compares\ adjacent\ elements\ and\ swaps\ them\ if\ they're\ in\ the\ wrong\ order.\r\n\ \r\n\ @param\ array\ The\ array\ to\ be\ sorted\r\n\ @return\ The\ sorted\ array\r\n
comment10.params=array
comment10.target=int[]\ heapSort(int[])
comment10.text=\r\n\ Sorts\ an\ array\ using\ heap\ sort\ algorithm.\r\n\ Creates\ a\ heap\ structure\ and\ repeatedly\ extracts\ the\ maximum.\r\n\ \r\n\ @param\ array\ The\ array\ to\ be\ sorted\r\n\ @return\ The\ sorted\ array\r\n\ \r\n\ Algorithm\ explained\ based\ on\ research\ from\ GeeksforGeeks\:\r\n\ https\://www.geeksforgeeks.org/time-complexities-of-all-sorting-algorithms/\r\n
comment11.params=array\ n\ i
comment11.target=void\ heapify(int[],\ int,\ int)
comment11.text=\r\n\ Helper\ method\ to\ maintain\ the\ max\ heap\ property.\r\n\ Ensures\ that\ the\ subtree\ rooted\ at\ index\ `i`\ is\ a\ valid\ max\ heap.\r\n\r\n\ @param\ array\ The\ array\ representing\ the\ heap\r\n\ @param\ n\ The\ size\ of\ the\ heap\r\n\ @param\ i\ The\ index\ of\ the\ root\ of\ the\ subtree\ to\ heapify\r\n
comment12.params=
comment12.target=int\ getSwapCount()
comment12.text=\r\n\ Gets\ the\ total\ number\ of\ swaps\ performed\ in\ the\ last\ sort\ operation.\r\n\ \r\n\ @return\ Number\ of\ swaps\r\n
comment13.params=array
comment13.target=java.lang.String\ toString(int[])
comment13.text=\r\n\ Converts\ an\ array\ to\ a\ readable\ string\ format.\r\n\ \r\n\ @param\ array\ The\ array\ to\ convert\r\n\ @return\ String\ representation\ of\ the\ array\r\n
comment2.params=array
comment2.target=int[]\ selectionSort(int[])
comment2.text=\r\n\ Sorts\ an\ array\ using\ selection\ sort\ algorithm.\r\n\ Finds\ the\ minimum\ element\ in\ unsorted\ portion\ and\ places\ it\ at\ the\ beginning.\r\n\ \r\n\ @param\ array\ The\ array\ to\ be\ sorted\r\n\ @return\ The\ sorted\ array\r\n
comment3.params=array
comment3.target=int[]\ insertionSort(int[])
comment3.text=\r\n\ Sorts\ an\ array\ using\ insertion\ sort\ algorithm.\r\n\ Builds\ the\ final\ sorted\ array\ one\ item\ at\ a\ time.\r\n\ \r\n\ @param\ array\ The\ array\ to\ be\ sorted\r\n\ @return\ The\ sorted\ array\r\n
comment4.params=array
comment4.target=int[]\ mergeSort(int[])
comment4.text=\r\n\ Sorts\ an\ array\ using\ merge\ sort\ algorithm.\r\n\ Divides\ array\ into\ smaller\ subarrays,\ sorts\ them,\ and\ merges\ them\ back.\r\n\ \r\n\ @param\ array\ The\ array\ to\ be\ sorted\r\n\ @return\ The\ sorted\ array\r\n
comment5.params=array\ left\ right
comment5.target=int[]\ mergeSortRecursive(int[],\ int,\ int)
comment5.text=\r\n\ Helper\ method\ that\ recursively\ divides\ and\ sorts\ array\ segments.\r\n
comment6.params=left\ right
comment6.target=int[]\ merge(int[],\ int[])
comment6.text=\r\n\ Merges\ two\ sorted\ arrays\ into\ one\ sorted\ array.\r\n
comment7.params=array
comment7.target=int[]\ shellSort(int[])
comment7.text=\r\n\ Sorts\ an\ array\ using\ shell\ sort\ algorithm.\r\n\ Improves\ on\ insertion\ sort\ by\ comparing\ elements\ far\ apart.\r\n\ \r\n\ @param\ array\ The\ array\ to\ be\ sorted\r\n\ @return\ The\ sorted\ array\r\n\ \r\n\ Algorithm\ explained\ based\ on\ research\ from\ GeeksforGeeks\:\r\n\ https\://www.geeksforgeeks.org/time-complexities-of-all-sorting-algorithms/\r\n
comment8.params=array
comment8.target=int[]\ quickSort(int[])
comment8.text=\r\n\ Sorts\ an\ array\ using\ quick\ sort\ algorithm.\r\n\ Picks\ a\ 'pivot'\ element\ and\ partitions\ array\ around\ it.\r\n\ \r\n\ @param\ array\ The\ array\ to\ be\ sorted\r\n\ @return\ The\ sorted\ array\r\n\ \r\n\ Algorithm\ explained\ based\ on\ research\ from\ GeeksforGeeks\:\r\n\ https\://www.geeksforgeeks.org/time-complexities-of-all-sorting-algorithms/\r\n
comment9.params=array\ low\ high
comment9.target=int\ seperate(int[],\ int,\ int)
comment9.text=\r\n\ Helper\ method\ for\ quickSort\ that\ partitions\ the\ array\ around\ a\ pivot\ element.\r\n\ Elements\ smaller\ than\ the\ pivot\ are\ moved\ to\ the\ left,\ and\ elements\ greater\ are\ moved\ to\ the\ right.\r\n\ \r\n\ @param\ array\ The\ array\ to\ be\ partitioned\r\n\ @param\ low\ The\ starting\ index\ of\ the\ subarray\r\n\ @param\ high\ The\ ending\ index\ of\ the\ subarray\r\n\ @return\ The\ index\ of\ the\ pivot\ element\ after\ partitioning\r\n
numComments=14
