#BlueJ class context
comment0.target=StockBot
comment0.text=\r\n\ StockBot\ is\ a\ utility\ class\ for\ analyzing\ stock\ data,\ calculating\ indicators\ like\ RSI\ (Relative\ Strength\ Index)\r\n\ and\ Moving\ Average\ (MA),\ and\ running\ back-testing\ algorithms\ to\ evaluate\ trading\ strategies.\r\n
comment1.params=filePath
comment1.target=StockBot(java.lang.String)
comment1.text=\r\n\ Constructor\ for\ StockBot.\ Loads\ stock\ data\ from\ the\ given\ file.\r\n\r\n\ @param\ filePath\ The\ path\ to\ the\ CSV\ file\ containing\ stock\ data.\r\n\ @throws\ Exception\ If\ the\ file\ cannot\ be\ read\ or\ parsed.\r\n
comment10.params=
comment10.target=java.util.List\ getStockDataList()
comment10.text=\r\n\ Retrieves\ the\ list\ of\ stock\ data.\r\n\r\n\ @return\ The\ list\ of\ StockData\ objects.\r\n
comment2.params=stockDataList
comment2.target=void\ setStockDataList(java.util.List)
comment2.text=\r\n\ Updates\ the\ stock\ data\ list.\ Used\ for\ testing\ with\ aggregated\ data\ like\ weekly\ or\ monthly\ data.\r\n\r\n\ @param\ stockDataList\ The\ new\ list\ of\ stock\ data.\r\n
comment3.params=filePath
comment3.target=java.util.List\ loadStockData(java.lang.String)
comment3.text=\r\n\ Loads\ stock\ data\ from\ a\ CSV\ file,\ parses\ each\ line,\ and\ stores\ it\ in\ a\ list.\r\n\r\n\ @param\ filePath\ The\ path\ to\ the\ CSV\ file.\r\n\ @return\ A\ list\ of\ StockData\ objects.\r\n\ @throws\ Exception\ If\ the\ file\ cannot\ be\ read\ or\ parsed.\r\n
comment4.params=value
comment4.target=java.lang.String\ cleanNumericString(java.lang.String)
comment4.text=\r\n\ Cleans\ a\ numeric\ string\ by\ removing\ commas\ and\ quotes.\r\n\r\n\ @param\ value\ The\ raw\ numeric\ string\ from\ the\ CSV.\r\n\ @return\ A\ cleaned\ numeric\ string.\r\n
comment5.params=period
comment5.target=void\ calculateRSI(int)
comment5.text=\r\n\ Calculates\ the\ Relative\ Strength\ Index\ (RSI)\ for\ the\ stock\ data.\r\n\r\n\ @param\ period\ The\ period\ to\ use\ for\ calculating\ RSI.\r\n\ @see\ <a\ href\="https\://www.macroption.com/rsi-calculation/">RSI\ Calculation\ Reference</a>\r\n
comment6.params=period
comment6.target=void\ calculateMovingAverage(int)
comment6.text=\r\n\ Calculates\ the\ Moving\ Average\ (MA)\ for\ the\ stock\ data.\r\n\r\n\ @param\ period\ The\ period\ to\ use\ for\ calculating\ the\ moving\ average.\r\n
comment7.params=balance\ shares
comment7.target=double\ tradeEvaluator(double,\ int)
comment7.text=\r\n\ Evaluates\ a\ trading\ strategy\ based\ on\ RSI\ thresholds.\r\n\r\n\ @param\ balance\ The\ starting\ cash\ balance.\r\n\ @param\ shares\ \ The\ starting\ number\ of\ shares.\r\n\ @return\ The\ final\ portfolio\ value.\r\n
comment8.params=timeframe
comment8.target=java.util.List\ aggregateData(java.lang.String)
comment8.text=\r\n\ Aggregates\ stock\ data\ into\ larger\ timeframes\ (weekly,\ monthly,\ yearly).\r\n\r\n\ @param\ timeframe\ The\ desired\ timeframe\ ("weekly",\ "monthly",\ or\ "yearly").\r\n\ @return\ Aggregated\ stock\ data\ for\ the\ specified\ timeframe.\r\n
comment9.params=balance\ shares\ momentumPeriod
comment9.target=double\ momentumTradeEvaluator(double,\ int,\ int)
comment9.text=\r\n\ Evaluates\ a\ momentum-based\ trading\ strategy.\r\n\r\n\ @param\ balance\ \ \ \ \ \ \ \ The\ starting\ balance.\r\n\ @param\ shares\ \ \ \ \ \ \ \ \ The\ starting\ number\ of\ shares.\r\n\ @param\ momentumPeriod\ The\ period\ to\ use\ for\ calculating\ momentum.\r\n\ @return\ The\ final\ portfolio\ value\ after\ applying\ the\ strategy.\r\n
numComments=11
